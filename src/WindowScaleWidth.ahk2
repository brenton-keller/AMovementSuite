#Requires AutoHotkey v2.0
#SingleInstance Force

SetWinDelay -1
SetControlDelay -1
CoordMode "Mouse", "Screen"

CalculateColorWidth(currentWidth, initialWidth, maxWidth) {
    if (currentWidth >= initialWidth) {
        ; Safety check for division by zero
        if (maxWidth <= initialWidth) {
            ; Return the teal color since we're at max width
            return Format("{:02X}{:02X}{:02X}", Colors.TEAL.R, Colors.TEAL.G, Colors.TEAL.B)
        }
        
        percentage := (currentWidth - initialWidth) / (maxWidth - initialWidth)
        ; Clamp percentage to valid range
        percentage := Max(0, Min(1, percentage))
        r := Colors.BASELINE.R + (Colors.TEAL.R - Colors.BASELINE.R) * percentage
        g := Colors.BASELINE.G + (Colors.TEAL.G - Colors.BASELINE.G) * percentage
        b := Colors.BASELINE.B + (Colors.TEAL.B - Colors.BASELINE.B) * percentage
    }
    else {
        ; Safety check for minimum width
        if (initialWidth <= Colors.MIN_WIDTH) {
            return Format("{:02X}{:02X}{:02X}", Colors.DEEP_PURPLE.R, Colors.DEEP_PURPLE.G, Colors.DEEP_PURPLE.B)
        }
        
        percentage := (initialWidth - currentWidth) / (initialWidth - Colors.MIN_WIDTH)
        percentage := Min(1, percentage)
        r := Colors.BASELINE.R + (Colors.DEEP_PURPLE.R - Colors.BASELINE.R) * percentage
        g := Colors.BASELINE.G + (Colors.DEEP_PURPLE.G - Colors.BASELINE.G) * percentage
        b := Colors.BASELINE.B + (Colors.DEEP_PURPLE.B - Colors.BASELINE.B) * percentage
    }
    
    ; Clamp values between 0-255
    r := Round(Max(0, Min(255, r)))
    g := Round(Max(0, Min(255, g)))
    b := Round(Max(0, Min(255, b)))
    
    ; Return RGB color in hex format
    return Format("{:02X}{:02X}{:02X}", r, g, b)
}

^RButton::  ; Left Ctrl + Right Mouse Button
{
    global scalingModeActive

    ; If a scaling operation is already active, exit
    if (scalingModeActive)
        return

    ; Set flag to lock scaling mode
    scalingModeActive := true

    ; Check if functionality is enabled
    if (!widthScalingEnabled)
        return
        
    MouseGetPos ,, &mwin
    
    ; Check if it's a valid window for resizing
    if (!IsValidWindowForResize(mwin)) {
        return
    }

    MouseGetPos &startX, &startY, &mwin
    WinGetPos &wx, &wy, &ww, &wh, "ahk_id " mwin

    ; Get the monitor containing the window
    monitorIndex := GetWindowMonitor(wx, wy, ww, wh)
    MonitorGet(monitorIndex, &monLeft, &monTop, &monRight, &monBottom)
    MonitorGetWorkArea(monitorIndex, &workLeft, &workTop, &workRight, &workBottom)


    ; Initial values
    initialW := ww
    edgeThreshold := 50  ; Pixels from edge to trigger snap

    ; Calculate maximum width and add safety check
    maxWidth := workRight - workLeft
    if (maxWidth <= initialW) {
        maxWidth := initialW + 1  ; Add 1 pixel buffer to prevent division by zero
    }

    relativeX := (startX - wx) / initialW

    ; Create preview GUI
    previewGui := Gui("+ToolWindow -Caption +AlwaysOnTop +E0x20")
    previewGui.BackColor := "22B14C"  ; Same nice green as previous version
    WinSetTransparent 75, previewGui.Hwnd
    previewGui.Show("x" wx " y" wy " w" ww " h" wh " NoActivate")

    While true
    {
        if !GetKeyState("RButton", "P") || !GetKeyState("LControl", "P")
            break

        MouseGetPos &currentX

        deltaX := currentX - startX
        
        ; Check if mouse is near screen edge
        if (currentX >= workRight - edgeThreshold)
        {
            ; Snap to max width
            newW := maxWidth
            newX := workLeft
        }
        else
        {
            ; Dynamic sensitivity based on target width
            if (deltaX < 0) {
                ; For reduction (moving mouse left)
                scaleFactor := 1 + (deltaX * 0.003)
            } else {
                ; For expansion (moving mouse right)
                scaleFactor := 1 + (deltaX * 0.003)
            }
            scaleFactor := Max(0.25, scaleFactor)
            newW := Round(initialW * scaleFactor)
            newW := Max(Colors.MIN_WIDTH, Min(newW + 2, maxWidth + 2))  ; Added Min width constraint
            
            ; Calculate horizontal position
            newX := Round(startX - (newW * relativeX))
            newX := Max(workLeft - 1, Min(workRight - newW - 1, newX))
        }

        ; Update preview color based on new height
        newColor := CalculateColorWidth(newW, initialW, maxWidth)
        previewGui.BackColor := newColor

        ; Update preview
        WinMove newX, wy, newW, wh, previewGui.Hwnd
        WinSetRegion "0-0 w" newW " h" wh, previewGui.Hwnd
    }

    ; Apply final size and destroy preview
    previewGui.Destroy()
    if (IsSet(newW) && IsSet(newX))
    {
        ; Check if window is maximized
        isMaximized := WinGetMinMax("ahk_id " mwin)
        
        if (isMaximized = 1) ; 1 means maximized
        {
            ; Restore the window first
            WinRestore "ahk_id " mwin
            ; Small sleep to ensure the restore completes
            Sleep 10
        }
        
        ; Apply new dimensions
        WinMove newX, wy, newW, wh, "ahk_id " mwin
        
        ; Force a refresh to prevent visual artifacts
        WinHide "ahk_id " mwin
        WinShow "ahk_id " mwin
    }
    resizeActive := false
    scalingModeActive := false
}